// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: operandStackModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct OperationStackProtoc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var instructionID: Int64 = 0

  public var basePointer: Int64 = 0

  public var stackPointer: Int64 = 0

  public var status: Int64 = 0

  public var address: Int64 = 0

  public var value: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct OperationStacksProtoc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var osp: [OperationStackProtoc] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension OperationStackProtoc: @unchecked Sendable {}
extension OperationStacksProtoc: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension OperationStackProtoc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "OperationStackProtoc"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "instructionID"),
    2: .same(proto: "basePointer"),
    3: .same(proto: "stackPointer"),
    4: .same(proto: "status"),
    5: .same(proto: "address"),
    6: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.instructionID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.basePointer) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.stackPointer) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.status) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.address) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.instructionID != 0 {
      try visitor.visitSingularInt64Field(value: self.instructionID, fieldNumber: 1)
    }
    if self.basePointer != 0 {
      try visitor.visitSingularInt64Field(value: self.basePointer, fieldNumber: 2)
    }
    if self.stackPointer != 0 {
      try visitor.visitSingularInt64Field(value: self.stackPointer, fieldNumber: 3)
    }
    if self.status != 0 {
      try visitor.visitSingularInt64Field(value: self.status, fieldNumber: 4)
    }
    if self.address != 0 {
      try visitor.visitSingularInt64Field(value: self.address, fieldNumber: 5)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: OperationStackProtoc, rhs: OperationStackProtoc) -> Bool {
    if lhs.instructionID != rhs.instructionID {return false}
    if lhs.basePointer != rhs.basePointer {return false}
    if lhs.stackPointer != rhs.stackPointer {return false}
    if lhs.status != rhs.status {return false}
    if lhs.address != rhs.address {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension OperationStacksProtoc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "OperationStacksProtoc"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "osp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.osp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.osp.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.osp, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: OperationStacksProtoc, rhs: OperationStacksProtoc) -> Bool {
    if lhs.osp != rhs.osp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
